// Code generated by github.com/ngicks/gommon/pkg/enum/cmd/generate_enum/generate_enum.go. DO NOT EDIT.
package enum

import "os"

type Enum[T any] struct {
	data any
}

func EnumInt[T any](val int) Enum[T] {
	return Enum[T]{
		data: val,
	}
}

func EnumString[T any](val string) Enum[T] {
	return Enum[T]{
		data: val,
	}
}

func EnumOsFile[T any](val *os.File) Enum[T] {
	return Enum[T]{
		data: val,
	}
}

type EnumMatcher[T any] struct {
	Int    func(int) T
	String func(string) T
	OsFile func(*os.File) T
	Any    func() T
}

func (e Enum[T]) Match(m EnumMatcher[T]) T {
	switch x := e.data.(type) {
	case int:
		if m.Int != nil {
			return m.Int(x)
		}
	case string:
		if m.String != nil {
			return m.String(x)
		}
	case *os.File:
		if m.OsFile != nil {
			return m.OsFile(x)
		}
	}

	if m.Any != nil {
		return m.Any()
	}

	panic("non exhaustive match")
}
