// Code generated by github.com/ngicks/gommon/pkg/enum/cmd/generate_enum/generate_enum.go. DO NOT EDIT.
package enum

import "os"

type EnumB struct {
	data any
}

func EnumBInt(val int) EnumB {
	return EnumB{
		data: val,
	}
}

func EnumBString(val string) EnumB {
	return EnumB{
		data: val,
	}
}

func EnumBOsFile(val *os.File) EnumB {
	return EnumB{
		data: val,
	}
}

type EnumBMatcher struct {
	Int    func(int)
	String func(string)
	OsFile func(*os.File)
	Any    func()
}

func (e EnumB) Match(m EnumBMatcher) {
	switch x := e.data.(type) {
	case int:
		if m.Int != nil {
			m.Int(x)
		}
	case string:
		if m.String != nil {
			m.String(x)
		}
	case *os.File:
		if m.OsFile != nil {
			m.OsFile(x)
		}
	}

	if m.Any != nil {
		m.Any()
	}

	panic("non exhaustive match")
}
