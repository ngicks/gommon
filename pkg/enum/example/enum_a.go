// Code generated by github.com/ngicks/gommon/pkg/enum/cmd/generate_enum/generate_enum.go. DO NOT EDIT.
package example

import "os"

type EnumA[T any] struct {
	data any
}

func EnumAInt[T any](val int) EnumA[T] {
	return EnumA[T]{
		data: val,
	}
}

func EnumAString[T any](val string) EnumA[T] {
	return EnumA[T]{
		data: val,
	}
}

func EnumAOsFile[T any](val *os.File) EnumA[T] {
	return EnumA[T]{
		data: val,
	}
}

type EnumAMatcher[T any] struct {
	Int     func(v int) T
	String  func(v string) T
	OsFile  func(v *os.File) T
	Default func(v any) T
}

func (e EnumA[T]) Match(m EnumAMatcher[T]) T {
	var ret T
	switch x := e.data.(type) {
	case int:
		if m.Int != nil {
			ret = m.Int(x)
			return ret
		}
	case string:
		if m.String != nil {
			ret = m.String(x)
			return ret
		}
	case *os.File:
		if m.OsFile != nil {
			ret = m.OsFile(x)
			return ret
		}
	}

	if m.Default != nil {
		ret = m.Default(e.data)
		return ret
	}

	return ret
}
