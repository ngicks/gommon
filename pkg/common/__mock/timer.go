// Code generated by MockGen. DO NOT EDIT.
// Source: timer.go

// Package mock_common is a generated GoMock package.
package mock_common

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTimer is a mock of Timer interface.
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
}

// MockTimerMockRecorder is the mock recorder for MockTimer.
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance.
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockTimer) Channel() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Channel indicates an expected call of Channel.
func (mr *MockTimerMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockTimer)(nil).Channel))
}

// Reset mocks base method.
func (m *MockTimer) Reset(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", d)
}

// Reset indicates an expected call of Reset.
func (mr *MockTimerMockRecorder) Reset(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockTimer)(nil).Reset), d)
}

// ResetTo mocks base method.
func (m *MockTimer) ResetTo(to time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetTo", to)
}

// ResetTo indicates an expected call of ResetTo.
func (mr *MockTimerMockRecorder) ResetTo(to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetTo", reflect.TypeOf((*MockTimer)(nil).ResetTo), to)
}

// Stop mocks base method.
func (m *MockTimer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockTimerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTimer)(nil).Stop))
}
