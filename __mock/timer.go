// Code generated by MockGen. DO NOT EDIT.
// Source: timer.go

// Package mock_gommon is a generated GoMock package.
package mock_gommon

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockITimer is a mock of ITimer interface.
type MockITimer struct {
	ctrl     *gomock.Controller
	recorder *MockITimerMockRecorder
}

// MockITimerMockRecorder is the mock recorder for MockITimer.
type MockITimerMockRecorder struct {
	mock *MockITimer
}

// NewMockITimer creates a new mock instance.
func NewMockITimer(ctrl *gomock.Controller) *MockITimer {
	mock := &MockITimer{ctrl: ctrl}
	mock.recorder = &MockITimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITimer) EXPECT() *MockITimerMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockITimer) Channel() <-chan time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Channel indicates an expected call of Channel.
func (mr *MockITimerMockRecorder) Channel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockITimer)(nil).Channel))
}

// Reset mocks base method.
func (m *MockITimer) Reset(to, now time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset", to, now)
}

// Reset indicates an expected call of Reset.
func (mr *MockITimerMockRecorder) Reset(to, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockITimer)(nil).Reset), to, now)
}

// Stop mocks base method.
func (m *MockITimer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockITimerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockITimer)(nil).Stop))
}
